<?xml version="1.0" encoding="UTF-8"?>

<!--*****************************************
This is part of the Ma Trận Sơ Cấp
Copyright (C) 2023-2024
Phạm Công Vinh, Phạm Xuân Trung
See the file COPYING for copying conditions.
******************************************-->

<section xml:id="sec-bien" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Biến</title>

  <objectives>
    <ol>
      <li>Các mục tiêu của section.</li>
      <li></li>
      <li></li>
    </ol>
  </objectives>
  
  <p>
    <term>Biến</term> là một trong những khái niệm cơ bản và quan trọng nhất của lập trình.
  </p>

  <p>
    Trong toán học, ta thường hay thấy biến số <m>x</m> trong các hàm số, ví dụ như: <me>f(x) = x^2 + 2x + 1</me> Ở đây, <q>biến</q> có nghĩa là có thể thay đổi và không cố định.
  </p>

  <definition xml:id="def-bien">
    <statement>
      <p>
        Trong lập trình, <term>biến</term> được dùng để lưu trữ dữ liệu.
      </p>

      <p>
        Dữ liệu được chứa trong biến còn được gọi là <term>giá trị</term> của biến, và nó <em>thường xuyên được cập nhật</em> trong quá trình chương trình chạy.
      </p>

      <p>
        Thuật ngữ để chỉ việc tạo ra một biến mới là <term>khai báo</term>.
      </p>
      
      <p>
        Thuật ngữ để chỉ việc <term>cập nhật</term> giá trị của một biến đã tồn tại là <term>gán</term>.
      </p>
    </statement>
  </definition>

  <technology>
    <title>Khai báo hoặc gán</title>
    <p>
      Để khai báo biến hoặc gán cho biết giá trị mới, ta đều sử dụng dấu <c>=</c> như sau: <me>{\color{blue} \text{tên biến}} = \text{giá trị}</me>
    </p>
    <p>
      Vì vậy, dấu bằng <c>=</c> trong lập trình <em>không bao giờ</em> được dùng theo nghĩa của đẳng thức.
    </p>
  </technology>
  
  <p>
    Dưới đây là ví dụ:
  </p>

  <sage>
    <input>
      a = 1
      b = a
      print(a)
      print(b)

      # Update bien
      a = 2
      print(a)
      print(b)
    </input>
  </sage>
  <problem>
    <pre>
      1
      1
      2
      1
    </pre>
  </problem>
  
  <investigation>
    <p></p>
    <p>
      Đầu tiên, ta khai báo biến <c>a</c> và gán cho nó giá trị là <c>1</c>.
    </p>
    <p>
      Tiếp, ta khai báo <c>b</c> và gán cho nó giá trị bằng giá trị hiện tại của <c>a</c>, vậy <c>b</c> cũng có giá trị là <c>1</c>. 
    </p>
    <p>
      Ta sử dụng lệnh <c>print()</c> để truy cập và hiển thị giá trị hiện tại của hai biến ra terminal.
    </p>
    <p>
      Sau đó, ta gán cho <c>a</c> một giá trị mới, hay nói cách khác là cập nhật giá trị của <c>a</c>, thành <c>2</c>, nhưng ta không động đến <c>b</c>.
    </p>

    <p>
      <alert>Chú ý</alert>: Nếu đến bước này bạn nghĩ rằng cả <c>a</c> và <c>b</c> đều có giá trị là <c>2</c>, thì bạn vẫn đang hiểu dấu bằng theo nghĩa của đẳng thức. Điều này là không đúng đối với lập trình.
    </p>

    <p>
      Vì vậy, khi dùng <c>print()</c> để hiển thị giá trị của 2 biến ra terminal, ta nhận được <c>2</c> và <c>1</c>, chứ không phải <c>2</c> và <c>2</c>.
    </p>
  </investigation>

  <p>
    Nếu sau khi cập nhật biến <c>a</c>, ta lại muốn biến <c>b</c> cũng có giá trị bằng <c>a</c>, thì ta phải cập nhật biến <c>b</c> một lần nữa. Bạn thử thêm <c>b = a</c> vào dưới dòng 7 và chạy lại code xem điều này có đúng không nhé.
  </p>

  <insight>
    <p>
      Ví dụ trên về biến dù đơn giản nhưng đã làm rối não rất nhiều người mới bắt đầu, đặc biệt là những người có bộ não toán học. Vì họ thấy <c>b = a</c> nên họ nghĩ đây là một đẳng thức luôn đúng trong suốt quá trình chạy. Nhưng lối suy nghĩ đó là <em>sai</em> đối với lập trình.
    </p>
  </insight>

  <note>
    <title>Đặt tên cho biến</title>
    
    <p>
      Tên của một biến có một vài yêu cầu, ví dụ như việc <em>không</em> được chứa ký tự khoảng trắng (space), cũng như một vài ký tự đặc biệt khác.
    </p>
    <p>
      Chỉ cần tuân thủ chúng là bạn có thể đặt tên cho biến <em>tùy thích</em>. Vì vậy, tùy vào cá nhân lập trình viên, tên biến sẽ rất đa dạng, ví dụ như:
      <ul>
        <li>
          <p>
            dia_chi_nha 
          </p>
        </li>
        <li>
          <p>
            diaChiNha
          </p>
        </li>
        <li>
          <p>
            DiaChiNha 
          </p>
        </li>
        <li>
          <p>
            v.v.
          </p>
        </li>
      </ul>
    </p>
    <p>
      Trong cộng đồng lập trình có rất nhiều những quy ước hay tiêu chuẩn giúp ta chọn cách đặt tên biến sao cho phù hợp.
    </p>
    <p>
      Quyển sách này sẽ không hướng dẫn vấn đề này. Tên biến trong những ví dụ code sẽ được đặt sao cho <em>đơn giản và ngắn gọn nhất</em>.
    </p>
  </note>

</section>