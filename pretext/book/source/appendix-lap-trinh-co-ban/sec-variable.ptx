<?xml version="1.0" encoding="UTF-8"?>

<!--*****************************************
This is part of the Ma Trận Sơ Cấp
Copyright (C) 2023-2024
Phạm Công Vinh, Phạm Xuân Trung
See the file COPYING for copying conditions.
******************************************-->

<section xml:id="sec-variable" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Variables</title>

  <objectives>
    <ol>
      <li>Các mục tiêu của section.</li>
      <li></li>
      <li></li>
    </ol>
  </objectives>
  
  <p>
    <term>Variables</term> are one of the most fundamental concepts in programming.
  </p>

  <p>
    Trong toán học, ta thường hay thấy biến số <m>x</m> trong các hàm số, ví dụ như: <me>f(x) = x^2 + 2x + 1</me> Ở đây, <q>biến</q> có nghĩa là chưa xác định, hay nói cách khác <m>x</m> là trừu tượng cho tất cả những kết quả của hàm số trên khi ta thay thế <m>x</m> với những con số xác định.
    In mathematics, we often see the variable <m>x</m> in functions such as: <me>f(x) = x^2 + 2x + 1</me> Here <q>variable</q> means can be changed and is not fixed.
  </p>

  <definition xml:id="def-bien">
    <statement>
      <p>
        Trong lập trình, <term>biến</term> được dùng để lưu trữ một hay nhiều dữ liệu <term>xác định</term>.
        In programming, <term>variables</term> are used to store data. (And they have a name?)
      </p>

      <p>
        Dữ liệu được chứa trong biến còn được gọi là <term>giá trị</term> của biến, và nó <em>thường xuyên được cập nhật</em> trong quá trình chương trình chạy.
        The data stored inside a variable is called <term>value</term>, and it is <em>often updated</em> as new data needs to be stored.
      </p>

      <p>
        To <term>declare</term> a variable is to create a new variable.
      </p>
      
      <p>
        To <term>assign</term> data to a variable is to <term>update</term> an existing variable with a that data.
      </p>
    </statement>
  </definition>

  <technology>
    <title>Declaring and assigning</title>
    <p>
      To declare or assign values to a variable, we use the equal sign <c>=</c>: <me>{\color{blue} \text{name}} = \text{value}</me>.
    </p>
    <!-- ADD THIS IN VN -->
    <p>
      Therefore, the equal sign in programming should <em>never</em> be used for equality.
    </p>
  </technology>
  
  <p>
    For example:
  </p>

  <sage>
    <input>
      a = 1
      b = a
      print(a)
      print(b)

      # Update variable
      a = 2
      print(a)
      print(b)
    </input>
  </sage>
  <problem>
    <pre>
      1
      1
      2
      1
    </pre>
  </problem>
  
  <investigation>
    <p></p>
    <p>
      Firstly, we declare the variable <c>a</c> and assign it the value <c>1</c>.
    </p>
    <!-- ThiS -->
    <p>
      Next, we declare and assign <c>b</c> the current value of <c>a</c>, thus <c>b</c> also has the value <c>1</c>. 
    </p>
    <p>
      We then use the command <c>print()</c> to access and display their current values in the terminal.
    </p>
    <p>
      Sau đó, ta gán cho <c>a</c> một giá trị mới, hay nói cách khác là cập nhật giá trị của <c>a</c>, thành <c>2</c>, nhưng ta không động đến <c>b</c>.
      Next, we assign <c>a</c> a new value of <c>2</c>, in other words update its value to <c>2</c>, but we do not touch <c>b</c>.
    </p>

    <p>
      <alert>Chú ý</alert>: Nếu đến bước này bạn nghĩ rằng cả <c>a</c> và <c>b</c> đều có giá trị là <c>2</c>, thì bạn vẫn chưa thực sự hiểu hai khái niệm <term>khai báo</term> và <term>gán</term>, cũng như <term>tính xác định</term> của biến.
      <alert>Note</alert>: If at this step you think that the values of <c>a</c> and <c>b</c> should be <c>2</c>, then you are still associating <c>=</c> with equality, which is not the case for programming.
    </p>

<!--     <p>
      A variable in programming differs from that in mathematics in that it is changed <em>khi và chỉ khi</em> ta gán cho nó một giá trị mới, sử dụng dấu <c>=</c>. (Bạn có thể tham khảo <xref ref="def-toan-tu-gan"/>.)
      Biến trong lập trình khác với biến trong toán học ở chỗ nó thay đổi <em>khi và chỉ khi</em> ta gán cho nó một giá trị mới, sử dụng dấu <c>=</c>. (Bạn có thể tham khảo <xref ref="def-toan-tu-gan"/>.)
    </p> -->

    <p>
      Vì vậy, khi dùng <c>print()</c> để hiển thị giá trị của 2 biến ra terminal, ta nhận được <c>2</c> và <c>1</c>, chứ không phải <c>2</c> và <c>2</c>.
      Now if we use <c>print()</c>, the outcomes are <c>2</c> and <c>1</c> and not <c>2</c> and <c>2</c>.
    </p>
  </investigation>

  <p>
    If after updating <c>a</c>, we want <c>b</c> to again have the same value as <c>a</c>, then we have to update <c>b</c> accordingly. You can try to add <c>b = a</c> after line 7 and re-run the code to see if this is true.
  </p>

  <insight>
    <p>
      Ví dụ trên về biến dù đơn giản nhưng đã làm rối não rất nhiều người mới bắt đầu, đặc biệt là những người có bộ não toán học. Vì họ thấy <c>b = a</c> nên họ nghĩ đây là một biểu thức mang tính bao quát và luôn đúng trong chương trình. Nhưng lối suy nghĩ đó là <em>sai</em> đối với lập trình.
      The above example, though simple, has confused many beginners, especially those with a mathematical brain. Because they see <c>b = a</c>, they think it is an equality that holds true throughout the program's lifecycle. That mindset does <em>not</em> apply to programming, where lines of code are run one after another.
    </p>

    <p>
      Và nếu bạn đã thấu hiểu được ví dụ trên, thì xin chúc mừng<mdash></mdash>bạn đã vượt qua con boss đầu tiên! <!--  -->
      And if you have grasped the example, then congratulations<mdash></mdash>you have conquered the first boss!
    </p>
  </insight>

  <!-- "Free data" doesnt have a name in ENGLISH -->
  <!-- Remove the definition? -->
  <!-- Du lieu tu do (du lieu khong duoc chua trong bien) blah blah -->
  <p>
    Now we have a new simple definition.
  </p>
  <definition xml:id="def-du-lieu-tu-do">
    <statement>
      <p>
        Dữ liệu không được chứa trong biến được được gọi là <term>dữ liệu tự do</term>.
        Data that is not stored in a variable is called <term></term>.
      </p>
    </statement>
  </definition>
  
  <note>
    <title>Naming a variable</title>
    
    <p>
      A variable's name has some specifications such as <em>not</em> containing white-spaces or some other special characters.
    </p>
    <p>
      Adhering to those, you can name a variable whatever you'd like. Thus, depending on the individual a variable's name can vary.
      <ul>
        <li>
          <p>
            house_address
          </p>
        </li>
        <li>
          <p>
            houseAddress
          </p>
        </li>
        <li>
          <p>
            HouseAddress
          </p>
        </li>
        <li>
          <p>
            <etc></etc>
          </p>
        </li>
      </ul>
    </p>
    <p>
      In the programming community, there are different conventions for naming a variable.
    </p>
    <p>
      This book will not instruct you in that. Variables in our coding examples are named in a <em>short and simple</em> manner.
    </p>
  </note>

</section>