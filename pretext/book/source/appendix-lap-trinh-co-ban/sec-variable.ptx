<?xml version="1.0" encoding="UTF-8"?>

<!--*****************************************
This is part of the Ma Trận Sơ Cấp
Copyright (C) 2023-2024
Phạm Công Vinh, Phạm Xuân Trung
See the file COPYING for copying conditions.
******************************************-->

<section xml:id="sec-variable" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Variables</title>

  <objectives>
    <ol>
      <li>Các mục tiêu của section.</li>
      <li></li>
      <li></li>
    </ol>
  </objectives>
  
  <p>
    <term>Variables</term> are one of the most fundamental concepts in programming.
  </p>

  <p>
    In mathematics, we often see the variable <m>x</m> in functions such as: <me>f(x) = x^2 + 2x + 1</me> Here <q>variable</q> means can be changed and is not fixed.
  </p>

  <definition xml:id="def-variable">
    <statement>
      <p>
        In programming, <term>variables</term> are used to store data.
      </p>

      <p>
        The data stored inside a variable is called <term>value</term>, and it is <em>often updated</em> as new data need to be stored.
      </p>

      <p>
        To <term>declare</term> a variable is to create a new variable.
      </p>
      
      <p>
        To <term>assign</term> data to an existing variable is to <term>update</term> its value to that data.
      </p>
    </statement>
  </definition>

  <technology>
    <title>Declaring and assigning</title>
    <p>
      To declare or assign values to a variable, we use the equal sign <c>=</c>: <me>{\color{blue} \text{name}} = \text{value}</me>.
    </p>
    <p>
      Therefore, the equal sign <c>=</c> in programming should <em>never</em> be used for equality.
    </p>
  </technology>
  
  <p>
    For example:
  </p>

  <sage>
    <input>
      a = 1
      b = a
      print(a)
      print(b)

      # Update variable
      a = 2
      print(a)
      print(b)
    </input>
  </sage>
  <problem>
    <pre>
      1
      1
      2
      1
    </pre>
  </problem>
  
  <investigation>
    <p></p>
    <p>
      Firstly, we declare the variable <c>a</c> and assign it the value <c>1</c>.
    </p>
    <!-- ThiS -->
    <p>
      Next, we declare and assign <c>b</c> the current value of <c>a</c>, thus <c>b</c> also has the value <c>1</c>. 
    </p>
    <p>
      We then use the command <c>print()</c> to access and display their current values in the terminal.
    </p>
    <p>
      Next, we assign <c>a</c> a new value of <c>2</c>, in other words update its value to <c>2</c>, but we do not touch <c>b</c>.
    </p>

    <p>
      <alert>Note</alert>: If at this step you think that the values of <c>a</c> and <c>b</c> should both be <c>2</c>, then you are still associating <c>=</c> with equality, which is not the case for programming.
    </p>

    <p>
      Now when we use <c>print()</c>, the outcomes are <c>2</c> and <c>1</c>, not <c>2</c> and <c>2</c>.
    </p>
  </investigation>

  <p>
    If after updating <c>a</c>, we want <c>b</c> to again have the same value as <c>a</c>, then we have to update <c>b</c> accordingly. You can try to add <c>b = a</c> after line 7 and re-run the code to see if this is true.
  </p>

  <insight>
    <p>
      The above example, though simple, has confused many beginners, especially those with a mathematical brain. Because they see <c>b = a</c>, they think it is an equality that holds true throughout the program's lifecycle. That mindset does <em>not</em> apply to programming.
    </p>
  </insight>

  <note>
    <title>Naming a variable</title>
    
    <p>
      A variable's name has some specifications such as <em>not</em> containing white-spaces or some other special characters.
    </p>
    <p>
      Adhering to those, you can name a variable whatever you'd like. Thus, depending on the individual a variable's name can vary.
      <ul>
        <li>
          <p>
            house_address
          </p>
        </li>
        <li>
          <p>
            houseAddress
          </p>
        </li>
        <li>
          <p>
            HouseAddress
          </p>
        </li>
        <li>
          <p>
            <etc></etc>
          </p>
        </li>
      </ul>
    </p>
    <p>
      In the programming community, there are different conventions for naming a variable.
    </p>
    <p>
      This book will not instruct you in that. Variables in our coding examples are named in a <em>short and simple</em> manner.
    </p>
  </note>

</section>