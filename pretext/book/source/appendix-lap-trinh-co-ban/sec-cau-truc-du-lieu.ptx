<?xml version="1.0" encoding="UTF-8"?>

<!--*****************************************
This is part of the Ma Trận Sơ Cấp
Copyright (C) 2023-2024
Phạm Công Vinh, Phạm Xuân Trung
See the file COPYING for copying conditions.
******************************************-->

<section xml:id="sec-cau-truc-du-lieu" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Cấu Trúc Dữ Liệu</title>

  <objectives>
    <ol>
      <li>Các mục tiêu của section.</li>
      <li></li>
      <li></li>
    </ol>
  </objectives>

  <p>
    Trong các ví dụ từ trước đến giờ, mỗi một biến chỉ chứa duy nhất một giá trị. Giả sử ta có một chương trình để lưu trữ các số chính phương. Nó có thể trông như sau:
  </p>

  <program language="python">
    <input>
      cp1 = 0
      cp2 = 1
      cp3 = 4
      cp4 = 9
      # ...
      cp100 = 9801
    </input>
  </program>

  <p>
    Để không phải tạo ra một số lượng lớn các biến như vậy, ta có một đối tượng mới là <term>cấu trúc dữ liệu</term>.
  </p>

  <definition xml:id="def-ctdl">
    <statement>
      <p>
        <term>Cấu trúc dữ liệu</term> là dữ liệu có khả năng chứa cùng một lúc nhiều dữ liệu khác.
      </p>
      <p>
        Các dữ liệu <q>con</q> của cấu trúc dữ liệu được gọi là <term>phần tử</term>.
      </p>
      <p>
        Cấu trúc dữ liệu được xây dựng <em>dựa trên</em> kiểu dữ liệu, vì vậy những kiến thức ở <xref ref="sec-kieu-du-lieu"/> có thể được áp dụng cho nó.
      </p>
    </statement>
  </definition>
  
  <p>
    Dưới đây là một phiên bản khác của chương trình trên:
  </p>
  
  <program language="python">
    <input>
      import numpy as np # Su dung thu vien Numpy
      cp = np.array([0, 1, 4, 9, ..., 9801])
    </input>
  </program>

  <p>
    Dễ thấy, thay vì phải tạo ra 100 biến khác nhau, ta chỉ cần duy nhất 1 biến để đựng 100 giá trị. (Bạn đừng lo về cú pháp vội nhé.)
  </p>

  <p>
    Có rất nhiều cấu trúc dữ liệu thú vị và đặc biệt. Mỗi ngôn ngữ lập trình đều có tập hợp các cấu trúc dữ liệu của riêng mình.
  </p>

  <p>
    Đối với quyển sách về ma trận này, hai cấu trúc dữ liệu quan trọng nhất chắc chắn phải là <term>mảng (array)</term> và <term>ma trận (matrix)</term>.
  </p>

  <p>
    Hai tiểu mục dưới đây sẽ chỉ <em>giới thiệu sơ qua</em> hai đối tượng này. Nếu bạn có hứng thú với những vấn đề phức tạp hơn như cú pháp khai báo, nhập, truy, xuất phần tử, v.v., xem <xref provisional="sec-lap-trinh-mo-rong"/>.
  </p>

  <subsection xml:id="subsec-mang">
    <title>Mảng (Array)</title>

    <definition xml:id="def-mang">
      <statement>
        <p>
          Cấu trúc dữ liệu <term>mảng</term>, hay <term>array</term>, có thể chứa cùng một lúc nhiều phần tử.
        </p>
        <p>
          Các phần tử của mảng phải có <em>cùng kiểu dữ liệu</em>.
        </p>
      </statement>
    </definition>

    <p>
      Dưới đây là ví dụ:
    </p>

    <sage language="python">
      <input>
        import numpy as np # Su dung thu vien Numpy

        arr = np.array([1, 2, 3])
        print(arr, type(arr))
      </input>
    </sage>
    <problem>
      <pre>
        [1 2 3] &lt;class 'numpy.ndarray'&gt;
      </pre>
    </problem>
    <investigation>
      <p></p>
      <p>
        Ta khai báo một mảng có 3 phần tử là những số nguyên.
      </p>
      <p>
        Lệnh <c>type()</c> trả lại tên của kiểu dữ liệu là <c>numpy.ndarray</c>, có thể hiểu là <q>array của Numpy</q>.
      </p>
    </investigation>
    
    <p>
      Nếu ta thử khai báo mảng có chứa lẫn cả phần tử số nguyên và số thập phân, mảng sẽ <em>tự động</em> chuyển đổi kiểu dữ liệu của tất cả các phần tử sao cho phù hợp.
    </p>
    
    <sage language="python">
      <input>
        import numpy as np # Su dung thu vien Numpy

        arr1 = np.array([1, 2.5, 3])
        print(arr1)

        arr2 = np.array([1, "test", 3])
        print(arr2)
      </input>
    </sage>
    <problem>
      <pre>
        [1.  2.5 3. ]
        ['1' 'test' '3']
      </pre>
    </problem>
    <investigation>
      <p></p>
      <p>
        Mảng <c>arr1</c> nhận ra phần tử <c>2.5</c> là số thập phân nên nó tự động chuyển đổi kiểu dữ liệu của các phần tử số nguyên còn lại thành <c>float</c>.
      </p>
      <p>
        Tương tự, mảng <c>arr2</c> tự chuyển đổi tất cả các phần tử thành kiểu <c>str</c>.
      </p>
    </investigation>

  </subsection>

  <subsection xml:id="subsec-ma-tran">
    <title>Ma Trận</title>

    <definition xml:id="def-ma-tran">
      <statement>
        <p>
          Cấu trúc dữ liệu <term>ma trận</term>, hay <term>matrix</term>, có thể chứa cùng một lúc nhiều phần tử.
        </p>
        <p>
          Ma trận có <term>hai chiều</term>. Nói cách khác, các phần tử của một ma trận được sắp xếp thành các <term>hàng</term> và <term>cột</term>. 
        </p>
        <p>
          Các phần tử của ma trận phải có <em>cùng kiểu dữ liệu</em>.
        </p>
      </statement>
    </definition>

    <p>Dưới đây là ví dụ:</p>

    <sage language="python">
      <input>
        import numpy as np # Su dung thu vien Numpy

        mat = np.matrix([[1, 2, 3], [2, 4, 6]])
        print(mat, type(mat))
      </input>
    </sage>
    <problem>
      <pre>
        [[1 2 3]
         [2 4 6]] &lt;class 'numpy.matrix'&gt;
      </pre>
    </problem>
    <investigation>
      <p></p>
      <p>
        Ta khai báo một ma trận có 6 phần tử thuộc kiểu <c>int</c>. Hàng 1 gồm 3 phần tử <c>1 2 3</c>, và hàng 2 gồm 3 phần tử <c>2 4 6</c>. (Vậy đây là một ma trận có 2 hàng và 3 cột.)
      </p>
      <p>
        Lệnh <c>type()</c> cho thấy tên của kiểu dữ liệu là <c>numpy.matrix</c>, có thể hiểu là <q>ma trận của Numpy</q>.
      </p>
    </investigation>
    
    <p>
      Ta cũng có thể khai báo ma trận một cách dễ nhìn hơn như sau:
    </p>

    <sage language="python">
      <input>
        import numpy as np # Su dung thu vien Numpy

        mat = np.matrix(
          [
            [1, 2, 3],
            [2, 4, 6]
          ]
        )
        print(mat, type(mat))
      </input>
    </sage>
    <problem>
      <pre>
        [[1 2 3]
         [2 4 6]] &lt;class 'numpy.matrix'&gt;
      </pre>
    </problem>
    <investigation>
      <p></p>
      <p>
        Đoạn code này là hoàn toàn tương đương với đoạn code trên.
      </p>
      <p>
        Với cách trình bày này, người đọc code có thể dễ dàng nhìn thấy số hàng và số cột của ma trận.
      </p>
      <p>
        Và có một điều khá thú vị có thể bạn đã nhận ra: ma trận chính là một mảng to, và mỗi phần tử của nó là mảng con.
      </p>
    </investigation>

    <p>
      Và tương tự như mảng, ma trận cũng sẽ tự động cập nhật tất cả các phần tử sao cho chúng thuộc cùng một kiểu dữ liệu.
    </p>
    
    <sage language="python">
      <input>
        import numpy as np # Su dung thu vien Numpy

        mat = np.matrix(
          [
            [1, 2.5, 3],
            [2, 4, 6]
          ]
        )
        print(mat)
      </input>
    </sage>
    <problem>
      <pre>
        [[1.  2.5 3. ]
         [2.  4.  6. ]]
      </pre>
    </problem>
    <investigation>
      <p></p>
      <p>
        Ma trận trên nhận ra phần tử <c>2.5</c> là số thập phân nên nó tự động chuyển đổi kiểu dữ liệu của các phần tử số nguyên còn lại thành <c>float</c>.
      </p>
    </investigation>

  </subsection>

</section>