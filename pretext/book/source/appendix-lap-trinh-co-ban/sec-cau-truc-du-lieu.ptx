<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-cau-truc-du-lieu" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Cấu Trúc Dữ Liệu</title>

  <objectives>
    <ol>
      <li>Các mục tiêu của section.</li>
      <li></li>
      <li></li>
    </ol>
  </objectives>
  
  <p>
    Ta có một khái niệm mới, và đó là <term>cấu trúc dữ liệu</term>. Cấu trúc dữ liệu được
     xây dựng <em>dựa trên</em> <term>kiểu dữ liệu</term>, hay nói cách khác nó cũng là một
     kiểu dữ liệu và mang tính quyết định tính năng và tương tác của biến.
  </p>

  <p>
    Để nói một cách dễ hiểu thì cấu trúc dữ liệu giúp biến có khả năng chứa cùng một lúc nhiều
     dữ liệu, có thể giống nhau hoặc khác nhau. Dưới đây là ví dụ.
  </p>

  <sage language="python">
    <input>
      # Trong Python
      l1 = [1, 2, 3, 4]
      print(l1, type(l1))

      l2 = [1, 2.5, "so"]
      print(l2, type(l2)) 
    </input>
    <output>
      (for static output)
    </output>
  </sage>

  <p>
    Ở trên, ta đang sử dụng cấu trúc dữ liệu <c>list</c>, hay còn được gọi là danh sách.
     Đây là một cấu trúc dữ liệu có sẵn của Python rất phổ biến. Ta có thể thấy <c>l1</c>
     là một danh sách chứa các giá trị có kiểu <c>int</c>, còn <c>l2</c> lại chứa một
     hỗn hợp các kiểu dữ liệu. Và để khai báo một <c>list</c>, bạn phải sử dụng ngoặc vuông
     <c>[]</c> bao quanh các phần tử và dấu phẩy <c>,</c> để ngăn cách chúng.
  </p>
  
  <p>
    Có rất nhiều cấu trúc dữ liệu thú vị và đặc biệt. Mỗi ngôn ngữ lập trình đều có tập
     hợp các cấu trúc dữ liệu riêng của mình, và, một lần nữa, điều này dựa trên mục đích
     của nó.
  </p>

  <p>
    Đối với quyển sách về ma trận này, hai cấu trúc dữ liệu quan trọng nhất chắc chắn phải là:
    <ol>
      <li>
        <p>
          Mảng
        </p>
      </li>
      <li>
        <p>
          Ma trận
        </p>
      </li>
    </ol>
  </p>

  <subsection xml:id="subsec-mang">
    <title>Mảng</title>

    <p>
      <term>Mảng</term> là một cấu trúc dữ liệu rất phổ biến.
       Nó giúp biến có khả năng chứa cùng một lúc nhiều phần tử có <em>cùng kiểu dữ liệu</em>.
       Khi khai báo mảng, bạn phải xác định rõ kiểu dữ liệu ấy.
    </p>

    <p>
      Mảng <em>không</em> phải là một cấu trúc dữ liệu có sẵn trong Python.
       Để dùng mảng, ta phải sử dụng thư viện mở rộng.
       Và trong quyển sách này, <term>Numpy</term> sẽ đóng vai trò ý.
       Dưới đây là ví dụ.
    </p>

    <sage language="python">
      <input>
        import numpy as np # Su dung thu vien Numpy

        arr = np.array(
            [1, 2, 3],
            dtype = np.int64
        )
        print(arr, type(arr))
      </input>
      <output>
        (for static output)
      </output>
    </sage>

    <p>
      Ở trên, ta khai báo mảng <c>arr</c> có 3 phần tử, đồng thời cũng xác định kiểu dữ liệu
       của mảng là <c>int64</c>, là tương ứng của <c>int</c>.
    </p>
    
    <p>
      Nếu ta thử khai báo mảng có kiểu <c>int64</c> nhưng lại chứa phần tử số thập phân,
       mảng sẽ tự động chuyển đổi kiểu dữ liệu của tất cả các phần tử cho phù hợp.
    </p>
    
    <sage language="python">
      <input>
        import numpy as np # Su dung thu vien Numpy

        arr = np.array(
            [1, 2.5, 3],
            dtype = np.int64
        )
        print(arr, type(arr))
      </input>
      <output>
        (for static output)
      </output>
    </sage>

    <p>
      Ở trên, phần tử <c>2.5</c> là số thập phân được chuyển đổi thành kiểu <c>int64</c>,
       vì thế nó được làm tròn xuống thành <c>2</c>.
       Dưới đây là một ví dụ nữa khi phần tử mới được thêm vào mảng.
    </p>
    
    <sage language="python">
      <input>
        arr = np.append(arr, 4)
        print(arr, arr.dtype)

        arr = np.append(arr, 5.5)
        print(arr, arr.dtype)
      </input>
      <output>
        (for static output)
      </output>
    </sage>

    <p>
      Dễ thấy, nếu ta thêm phần tử <c>4</c> vào mảng, kiểu dữ liệu không thay đổi.
       Nhưng nếu ta thêm phần tử <c>5.5</c>, mảng sẽ tự động update kiểu dữ liệu
       thành <c>float64</c>, nghĩa là tất cả các phần tử đều trở thành số thập phân.
    </p>

  </subsection>

  <subsection xml:id="subsec-ma-tran">
    <title>Ma Trận</title>

    <p>
      <term>Ma trận</term> là một cấu trúc dữ liệu giúp biến có khả năng lưu trữ nhiều phần tử
       cùng một lúc và sắp xếp chúng thành các <term>hàng</term> và các <term>cột</term>.
    </p>

    <p>
      Để sử dụng ma trận trong Python, ta phải dùng thư viện Numpy và lệnh <c>np.matrix()</c> để khai báo.
    </p>
    
    <sage language="python">
      <input>
        import numpy as np # Su dung thu vien Numpy

        mat = np.matrix(
          [
            [1, 2, 3],
            [2, 4, 6],
            [3, 6, 9]
          ]
        )
        print(mat, type(mat))
      </input>
      <output>
        (for static output)
      </output>
    </sage>
    
    <p>
      Như vậy, cú pháp của ma trận là một cặp ngoặc vuông <c>[]</c> ở ngoài cùng,
       bao trùm các cặp ngoặc vuông khác ở bên trong nó.
       Trong đó, mỗi cặp ngoặc vuông con là một hàng của ma trận, và mỗi hàng ý phải có cùng số phần tử.
    </p>

    <p>
      SageMath có sẵn ma trận, và ta chỉ việc dùng lệnh <c>matrix()</c>.
       Ví dụ dưới đây sử dụng một cách viết khác, gọn hơn so với ở trên,
       có thể thấy với cặp ngoặc vuông ngoài cùng.
       Hai cách trình bày này là tương đương nhau khi biên dịch code.
    </p>

    <p>
      Ngoài ra, SageMath cung cấp lựa chọn biểu diễn ma trận và các đối tượng toán học khác bằng
       <latex /><mdash />một hệ thống phần mềm soạn thảo chuyên dành cho toán học. Ta chỉ
       việc sử dụng lệnh <c>show()</c>.
    </p>

    <sage>
      <input>
        mat = matrix([
            [1, 1, 1],
            [2, 2, 2],
            [3, 3, 3]
        ])
        latex.matrix_delimiters("[", "]") # Hien thi ngoac vuong (mac dinh la ngoac tron)
        show(mat)
      </input>
      <output>
        (for static output)
      </output>
    </sage>
    
    <p>
    </p>

    <remark>
      <p>
        Trong quyển sách này, các ví dụ lập trình ma trận sẽ có độ phức tạp ở mức thấp.
         Vì vậy, những thao tác như <term>truy cập</term>, <term>thêm</term>,
         <term>xóa</term> phần tử là <em>không quá cần thiết</em>.
         Nhưng nếu bạn muốn biết thêm, hãy tham khảo
         <xref ref="sec-thao-tac-ma-tran" text="phrase-global"/>.
      </p>
    </remark>
    
  </subsection>

</section>