<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-cau-truc-du-lieu" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Cấu Trúc Dữ Liệu</title>

  <objectives>
    <ol>
      <li>Các mục tiêu của section.</li>
      <li></li>
      <li></li>
    </ol>
  </objectives>
  
  <p>
    Ta có một khái niệm mới, và đó là <term>cấu trúc dữ liệu</term>. Cấu trúc dữ liệu được
     xây dựng <em>dựa trên</em> <term>kiểu dữ liệu</term>, hay nói cách khác nó cũng là một
     kiểu dữ liệu và mang tính quyết định tính năng và tương tác của biến.
  </p>

  <p>
    Để nói một cách dễ hiểu thì cấu trúc dữ liệu giúp biến có khả năng chứa cùng một lúc nhiều
     dữ liệu, có thể giống nhau hoặc khác nhau. Dưới đây là ví dụ.
  </p>

  <sage language="python">
    <input>
      # Trong Python
      l1 = [1, 2, 3, 4]
      print(l1, type(l1))

      l2 = [1, 2.5, "so"]
      print(l2, type(l2)) 
    </input>
    <output>
      (for static output)
    </output>
  </sage>

  <p>
    Ở trên, ta đang sử dụng cấu trúc dữ liệu <c>list</c>, hay còn được gọi là danh sách.
     Đây là một cấu trúc dữ liệu có sẵn của Python rất phổ biến. Ta có thể thấy <c>l1</c>
     là một danh sách chứa các giá trị có kiểu <c>int</c>, còn <c>l2</c> lại chứa một
     hỗn hợp các kiểu dữ liệu. Và để khai báo một <c>list</c>, bạn phải sử dụng ngoặc vuông
     <c>[]</c> bao quanh các phần tử và dấu phẩy <c>,</c> để ngăn cách chúng.
  </p>
  
  <p>
    Có rất nhiều cấu trúc dữ liệu thú vị và đặc biệt. Mỗi ngôn ngữ lập trình đều có tập
     hợp các cấu trúc dữ liệu riêng của mình, và, một lần nữa, điều này dựa trên mục đích
     của nó.
  </p>

  <p>
    Đối với quyển sách về ma trận này, hai cấu trúc dữ liệu quan trọng nhất chắc chắn phải là:
    <ol>
      <li>
        <p>
          Mảng
        </p>
      </li>
      <li>
        <p>
          Ma trận
        </p>
      </li>
    </ol>
  </p>

  <subsection xml:id="subsec-mang">
    <title>Mảng</title>

    <p>
      <term>Mảng</term> là một cấu trúc dữ liệu rất phổ biến.
       Nó giúp biến có khả năng chứa cùng một lúc nhiều dữ liệu có <em>cùng kiểu dữ liệu</em>.
       Khi khai báo mảng, bạn phải xác định rõ kiểu dữ liệu của các phần tử của mảng.
    </p>

    <p>
      Mảng <em>không</em> phải là một cấu trúc dữ liệu có sẵn trong Python.
       Để dùng mảng, ta phải sử dụng thư viện mở rộng.
       Và trong quyển sách này, <term>Numpy</term> sẽ đóng vai trò ý.
       Dưới đây là ví dụ.
    </p>

    <sage language="python">
      <input>
        import numpy as np # Su dung thu vien Numpy

        arr = np.array(
            [1, 2, 3],
            dtype = np.int64
        )
        print(arr, type(arr))
      </input>
      <output>
        (for static output)
      </output>
    </sage>

    <p>
      Ở trên, ta khai báo mảng <c>arr</c> có 3 phần tử, đồng thời cũng xác định kiểu dữ liệu
       của mảng là <c>int64</c> là tương ứng của <c>int</c> trong thư viện Numpy.
    </p>
    
    <p>
      Nếu ta thử khai báo mảng có kiểu <c>int64</c> nhưng lại mang phần tử số thập phân,
       mảng sẽ tự động chuyển đổi kiểu dữ liệu của tất cả các phần tử cho phù hợp.
    </p>
    
    <sage language="python">
      <input>
        import numpy as np # Su dung thu vien Numpy

        arr = np.array(
            [1, 2.5, 3],
            dtype = np.int64
        )
        print(arr, type(arr))
      </input>
      <output>
        (for static output)
      </output>
    </sage>

    <p>
      Để <term>thêm phần tử</term> vào mảng, ta sử dụng lệnh <c>np.append()</c> như sau.
    </p>
    
    <sage language="python">
      <input>
        arr = np.append(arr, 4)
        print(arr, arr.dtype)

        arr = np.append(arr, 5.5)
        print(arr, arr.dtype)
      </input>
      <output>
        (for static output)
      </output>
    </sage>

    <p>
      Dễ thấy, nếu ta thêm phần tử <c>4</c> vào mảng, kiểu dữ liệu không thay đổi.
       Nhưng nếu ta thêm phần tử <c>5.5</c>, mảng sẽ tự động update kiểu dữ liệu
       thành <c>float64</c>.
    </p>

    <p>
      Tiếp theo, để <term>truy cập phần tử</term> của mảng, ta sử dụng ngoặc vuông theo
       cú pháp sau.
    </p>

    <sage language="python">
      <input>
        print(arr[0]) 
        print(arr[1])
        print(arr[2])
      </input>
      <output>
        (for static output)
      </output>
    </sage>
    
    <p>
      Ta sử dụng ngoặc vuông <c>[]</c> ngay sau tên của mảng và bên trong là <term>chỉ số</term>
       của phần tử cần truy cập.
    </p>

    <note xml:id="note-chi-so">
      <title>Khác biệt giữa chỉ số trong toán học và trong lập trình</title>
      
      <p>
        Trong phần lớn các ngôn ngữ lập trình, chỉ số bắt đầu từ số <m>0</m> thay
          vì <m>1</m> như trong toán học.
      </p>

      <p>
        Vì vậy, trong quyển sách này, các chỉ số sẽ bắt đầu từ <m>0</m>. Nói cách khác,
          một mảng có <m>m</m> phần tử sẽ có hàng <m>0</m>, hàng <m>1</m>, hàng <m>2</m>,
          <ellipsis />, hàng <m>m - 2</m>, hàng <m>m - 1</m>
      </p>
    </note>

  </subsection>

  <subsection xml:id="subsec-ma-tran">
    <title>Ma Trận</title>
    
    <note>
      <title>Khác biệt giữa chỉ số trong toán học và trong lập trình</title>
      
      <p>
        Trong phần lớn các ngôn ngữ lập trình, chỉ số bắt đầu từ số <m>0</m> thay
          vì <m>1</m> như trong toán học.
      </p>

      <p>
        Vì vậy, trong quyển sách này, các chỉ số sẽ bắt đầu từ <m>0</m>. Nói cách khác,
          một ma trận có kích thước <m>m \times n</m> sẽ có hàng <m>0</m>, hàng <m>1</m>,
          hàng <m>2</m>, <ellipsis />, hàng <m>m - 1</m> và cột <m>0</m>, cột <m>1</m>, 
          cột <m>2</m>, <ellipsis />, cột <m>n - 1</m>.
      </p>
    </note>

    <p>
      Trong Numpy và SageMath, để truy cập phần tử nằm ở hàng <m>m</m>, cột <m>n</m> của ma trận A
      , ta sử dụng cú pháp <c>A[m, n]</c>. <m>m</m> và <m>n</m> được gọi là <term>chỉ số</term>.
    </p>


    <p>
      Ví dụ, để truy cập phần tử nằm ở hàng <m>2</m>, cột <m>0</m> của ma trận A
      , ta dùng cú pháp <c>A[2][0]</c>.
    </p>

    <p>
      Vì vector cột thực chất là ma trận có kích thước <m>m\times1</m>, khi ta nói
        <q>phần tử với chỉ số <m>a</m>, hay phần tử <m>a</m>, của vector cột <m>u</m></q>, 
        thực chất ta đang nói <q>phần tử nằm ở hàng <m>a</m>, cột <m>0</m> của <m>u</m></q>. 
        Vậy nên, cú pháp ta sử dụng là <c>u[a][0]</c>.
    </p>

    <p>
      Tương tự, cú pháp để truy cập phần tử (với chỉ số) <m>b</m> của
        vector hàng <m>v_{1 \times n}</m> là <c>v[0][b]</c>.
    </p>

      <sage language="python">
      <input>
        # Numpy
        print(cot_1[1, 0]) # Phan tu 1 cua 'cot_1'
        print(hang_1[0, 0]) # Phan tu 0 cua 'hang_1'
      </input>
      <output>
        Provisional
      </output>
    </sage>
    
    <sage>
      <input>
        # sagemath
        print(cot_2[0, 0]) # Phan tu 0 cua 'cot_2'
        print(hang_2[0, 2]) # Phan tu 2 cua 'hang_2'
      </input>
      <output>
        provisional
      </output>
    </sage>
  </subsection>

</section>