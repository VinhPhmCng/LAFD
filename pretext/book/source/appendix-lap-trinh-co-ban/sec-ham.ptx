<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-ham" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Hàm</title>

  <objectives>
    <ol>
      <li>Các mục tiêu của section.</li>
      <li></li>
      <li></li>
    </ol>
  </objectives>
  
  <p>
    Ta lại gặp một khái niệm nữa rất thân thuộc trong toán học<mdash /><term>Hàm</term>.
     Và nó cũng đóng vai trò thiết yếu trong lập trình.
  </p>

  <p>
    Giả sử ta có các biểu thức sau:

    <md>
      <mrow>1^2 + 2 \cdot 1 + 1</mrow>
      <mrow>2^2 + 2 \cdot 2 + 1</mrow>
      <mrow>\vdots</mrow>
      <mrow>100^2 + 2 \cdot 100 + 1</mrow>
    </md>

    Ta nhận ra là các biểu thức trên có cùng một dạng là đa thức bậc hai.
     Vậy, ta có thể rút gọn cách trình bày bằng hàm số như sau:

    <md>
      <mrow>f(x) = x^2 + 2 \cdot x + 1</mrow>
      <mrow></mrow>
      <mrow>f(1)</mrow>
      <mrow>f(2)</mrow>
      <mrow>\vdots</mrow>
      <mrow>f(100)</mrow>
    </md>
  </p>

  <p>
    <term>Hàm</term> trong lập trình cũng được tạo ra để giúp ta theo cách tương tự như vậy.
     Khi xuất hiện những đoạn code được dùng đi dùng lại nhiều lần, ta thường sử dụng
     hàm để trừu tượng hóa chúng.
  </p>

  <p>
    Ở phần này ta chưa đi sâu vào cú pháp để khai báo hàm,
    mà ta sẽ chỉ tập trung vào cú pháp để sử dụng những hàm có sẵn hoặc
    được cung cấp bởi thư viện.
    Để biết thêm về cú pháp <c>khai báo hàm</c>, tham khảo phần <xref ref="sec-khai-bao-ham"/>.
  </p>

  <p>
    Trước hết, ta có những <term>hàm toàn cục</term>
    là những hàm có thể sử dụng được ở bất kỳ nơi nào trong code.
    Để sử dụng nó ta chỉ việc <term>gọi hàm</term> bằng cú pháp:
    <me>{\color{blue} \text{tên hàm}} \, \text{(đầu vào 1, đầu vào 2, ...)}</me>
  </p>

  <p>
    Một ví dụ điển hình của hàm toàn cục chính là hàm <c>print()</c>.
    Nó có thể được gọi ở bất cứ nơi nào trong code, và với bất kỳ giá trị đầu vào nào.
  </p>

  <sage language="python">
    <input>
      print(5) 
      
      print("Hello World!")

      print([1, 2, 3, 4])
    </input>
    <output>
      (for static output)
    </output>
  </sage>

  <p>
    Sau đó, ta có những hàm thuộc quyền sở hữu của một kiểu dữ liệu xác định nào đó,
    còn được gọi là <term>hàm cục bộ</term>.
    Mỗi kiểu dữ liệu hay cấu trúc dữ liệu đều có tập hợp các hàm cục bộ của riêng mình.
  </p>

  <p>
    Cú pháp <term>gọi</term> hàm cục bộ là:

    <me>\text{tên biến.} {\color{blue} \text{tên hàm}} \, \text{(đầu vào 2, đầu vào 3, ...)}</me>

    hoặc

    <me>\text{dữ liệu.} {\color{blue} \text{tên hàm}} \, \text{(đầu vào 2, đầu vào 3, ...)}</me>
  </p>

  <p>
    Vậy, <term>đầu vào 1</term> chính là biến hay dữ liệu tự do mà ta gọi hàm lên.
    Dưới đây là ví dụ.
  </p>

  <sage language="python">
    <input>
      s = "Xin chao! Vi du ham cuc bo" 

      print(s.upper())
    </input>
    <output>
      (for static output)
    </output>
  </sage>
 
  <p>
    Vậy, <c>upper()</c> là một hàm cục bộ của kiểu <c>str</c>.
    Trong trường hợp này, nó nhận một giá trị vào là chuỗi <c>s</c>,
    và nó trả lại chuỗi đó sau khi viết hoa từng phần tử.
  </p>

  <p>
    Ta cũng có thể sử dụng nó trên một chuỗi tự do, không thuộc vào biến nào cả.
  </p>

  <sage language="python">
    <input>
      print("Xin chao the gioi!".upper()) 
    </input>
    <output>
      (for static output)
    </output>
  </sage>

  <p>
    Nhưng nếu ta thử dùng hàm <c>upper()</c> với kiểu <c>int</c>, ta sẽ gặp lỗi
    vì <c>int</c> không có hàm cục bộ trên.
  </p>

  <sage language="python">
    <input>
      a = 5 
      print(a.upper())
    </input>
    <output>
      (for static output)
    </output>
  </sage>


  <subsection xml:id="subsec-kieu-tra-lai-cua-ham">
    <title>Kiểu Của Tham Số Và Kiểu Trả Lại Của Hàm</title>

    <p>
      Hàm có nhiệm vụ nhận một giá trị đầu vào và trả lại một giá trị đầu ra.
      Có nhiều hàm mà tham số của nó bắt buộc phải thuộc vào một kiểu dữ liệu xác định nào đó, 
      và giá trị trả lại của nó cũng luôn thuộc một kiểu dữ liệu xác định.
      Ví dụ như hàm <c>upper()</c>, ta chỉ có thể truyền cho nó <c>str</c>,
      và kiểu trả lại của nó cũng sẽ luôn là <c>str</c>.
    </p>
    
    <sage language="python">
      <input>
        s = "Hello world!" 
        print(type(s))
        print(type(s.upper()))
      </input>
      <output>
        (for static output)
      </output>
    </sage>
    
    <p>
      Ví dụ tiếp theo là hàm <c>np.sqrt()</c>.
      Nó có thể nhận vào nhiều kiểu dữ liệu như <c>int</c>, <c>float</c>,
      thậm chí là mảng.
      Và nó sẽ trả lại kết quả thuộc kiểu dữ liệu phù hợp.
    </p>

    <sage language="python">
      <input>
        import numpy as np # Su dung thu vien Numpy

        a = np.sqrt(9)
        b = np.sqrt(5.5)
        c = np.sqrt([4, 9, 16])

        print(a, type(a))
        print(b, type(b))
        print(c, type(c))
      </input>
      <output>
        (for static output)
      </output>
    </sage>
    
    <p>
      Nhưng chắc chắn ta không thể truyền cho hàm <c>np.sqrt()</c> một chuỗi kiểu <c>str</c> rồi.
    </p>

    <sage language="python">
      <input>
        print(np.sqrt("xin chao?"))
      </input>
      <output>
        (for static output)
      </output>
    </sage>

    <p>
      Nhưng cũng có những hàm có thể nhận giá trị đầu vào có kiểu dữ liệu tự do.
      Cũng có những hàm trả lại kiểu dữ liệu tự do, hoặc nó có thể không trả lại gì cả.
      Khi ấy, kiểu dữ liệu đại diện cho điều đó là <c>None</c>.
    </p>

    <p>
      Một ví dụ điển hình cho hàm không có kiểu của tham số và kiểu trả lại chính là hàm <c>print()</c>
      Ta có thể truyền cho nó kiểu <c>str</c>, kiểu <c>int</c>, kiểu <c>float</c>, v.v.
      Và nó luôn trả lại <c>None</c>.
    </p>
    
    <sage language="python">
      <input>
        a = print("Hello world!") 
        print(a)
      </input>
      <output>
        (for static output)
      </output>
    </sage>
    
  </subsection>

</section>
