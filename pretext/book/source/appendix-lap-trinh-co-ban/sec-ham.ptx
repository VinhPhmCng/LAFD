<?xml version="1.0" encoding="UTF-8"?>

<section xml:id="sec-ham" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Hàm</title>

  <objectives>
    <ol>
      <li>Các mục tiêu của section.</li>
      <li></li>
      <li></li>
    </ol>
  </objectives>
  
  <p>
    Ta lại gặp một khái niệm nữa rất thân thuộc trong toán học<mdash /><term>Hàm</term>.
     Và nó cũng đóng vai trò thiết yếu trong lập trình.
  </p>

  <p>
    Giả sử ta có các biểu thức sau:

    <md>
      <mrow>1^2 + 2 \cdot 1 + 1</mrow>
      <mrow>2^2 + 2 \cdot 2 + 1</mrow>
      <mrow>\vdots</mrow>
      <mrow>100^2 + 2 \cdot 100 + 1</mrow>
    </md>

    Ta nhận ra là các biểu thức trên có cùng một dạng là đa thức bậc hai.
     Vậy, ta có thể rút gọn cách trình bày bằng hàm số như sau:

    <md>
      <mrow>f(x) = x^2 + 2 \cdot x + 1</mrow>
      <mrow></mrow>
      <mrow>f(1)</mrow>
      <mrow>f(2)</mrow>
      <mrow>\vdots</mrow>
      <mrow>f(100)</mrow>
    </md>
  </p>

  <p>
    <term>Hàm</term> trong lập trình cũng được tạo ra để giúp ta theo cách tương tự như vậy.
     Khi xuất hiện những đoạn code được dùng đi dùng lại nhiều lần, ta thường sử dụng
     hàm để trừu tượng hóa chúng.
  </p>

  <p>
    Cú pháp để <term>khai báo hàm</term> là:
    <md>
      <mrow> \amp {\color{purple} \text{def }} {\color{blue} \text{tên hàm}} \, \text{(tham số 1, tham số 2, ...):}</mrow>
      <mrow> \amp \qquad \text{...}</mrow>
      <mrow> \amp \qquad \text{thân hàm}</mrow>
      <mrow> \amp \qquad \text{...}</mrow>
      <mrow> \amp \qquad {\color{purple} \text{return }} \text{kết quả}</mrow>
    </md>
  </p>

  <p>
    Sau khi đã khai báo hàm, để sử dụng nó ta chỉ việc <term>gọi hàm</term> bằng cú pháp:
    <me>{\color{blue} \text{tên hàm}} \, \text{(đầu vào 1, đầu vào 2, ...)}</me>
  </p>

  <p>
    Dưới đây là ví dụ.
  </p>

  <sage language="python">
    <input>
      def cong_hai_roi_nhan_ba(x):
          x += 2
          x *= 3
          return x

      print(cong_hai_roi_nhan_ba(2))
      print(cong_hai_roi_nhan_ba(3))
    </input>
    <output>
      (for static output)
    </output>
  </sage>
  
  <p>
    Trước tiên, ta <term>khai báo</term> hàm bằng cú pháp <c>def</c>
     và cho nó cái tên là <c>cong_hai_roi_nhan_ba</c>,
     sau đó, ta cho nó <term>tham số</term> <c>x</c>.
     Ta sử dụng dấu hai chấm <c>:</c> để bắt đầu thân hàm.
     Phía dưới, những dòng code được thụt vào sẽ thuộc thân hàm.
  </p>

  <note>
    <p>
      Python là một ngôn ngữ sử dụng <term>khoảng trắng đầu dòng</term> để xác định
      mức độ ưu tiên (level) của các đoạn code.
      Bạn có thể hình dung bằng đoạn code giả dưới đây:
    </p>

    <program language="python" line-numbers="yes">
      <input>
        Level 1
            Level 2
                Level 3
                ...
            Level 2 (tiep tuc)
        Level 1 (tiep tuc)
      </input> 
    </program>

    <p>
      Ta thường sử dụng phím <c>Tab</c> để thụt đầu dòng trong Python.
    </p>
  </note>

  <p>
    Trong thân hàm, ta viết những dòng code miêu tả hành động của hàm.
     Ở ví dụ trên, ta tăng tham số <c>x</c> lên 2 đơn vị rồi nhân nó lên 3 lần.
  </p>

  <p>
    Ở cuối thân hàm, cú pháp <c>return</c> có nhiệm vụ trả lại kết quả.
    Ở ví dụ trên, hàm trả lại tham số <c>x</c> sau khi đã được biến đổi bởi những tính toán phía trên.
  </p>

  <p>
    Cuối cùng, ta sử dụng hàm bằng cách truyền cho nó những giá trị đầu vào như <c>2</c> và <c>3</c>.
    Kết quả trả lại được truyền vào hàm <c>print()</c>.
  </p>

  <note>
    <p>
      Từ khóa <c>return</c> đánh dấu sự kết thúc của hàm.
      Khi gặp từ khóa <c>return</c>, hàm sẽ ngay lập tức trả lại kết quả và kết thúc nghĩa vụ của mình.
    </p>

    <sage language="python">
      <input>
        def nhan_hai(x):
            x *= 2
            return x
            print("Hello world!") # Khong duoc chay

        a = 5
        print(nhan_hai(a))
      </input>
      <output>
        (for static output)
      </output>
    </sage>
    
  </note>

  <note>
    <p>
      Trong phần lớn các trường hợp, những câu lệnh ở bên trong hàm sẽ không làm thay đổi
      giá trị ban đầu của các tham số được truyền vào.
    </p>

    <sage language="python">
      <input>
        def cong_hai_roi_nhan_ba(x):
            x += 2
            x *= 3
            return x

        a = 2
        b = cong_hai_roi_nhan_ba(a)
        print(a)
        print(b)
      </input>
      <output>
        (for static output)
      </output>
    </sage>

    <p>
      Dễ thấy, giá trị của biến <c>a</c> không thay đổi sau khi gọi hàm <c>cong_hai_roi_nhan_ba(a)</c>.
    </p>
  </note>

  <subsection xml:id="subsec-kieu-tra-lai-cua-ham">
    <title>Kiểu Của Tham Số Và Kiểu Trả Lại Của Hàm</title>

    <p>
      Hàm có nhiệm vụ nhận một giá trị đầu vào và trả lại một giá trị đầu ra.
      Có nhiều hàm mà tham số của nó bắt buộc phải thuộc vào một kiểu dữ liệu xác định nào đó, 
      và giá trị trả lại của nó cũng luôn thuộc một kiểu dữ liệu xác định.
      Ví dụ như hàm <c>np.sqrt()</c>, ta có thể truyền cho nó <c>int</c>, <c>float</c>, v.v.,
      và kiểu trả lại của nó cũng sẽ luôn là một loại số phù hợp.
    </p>

    <sage language="python">
      <input>
        import numpy as np # Su dung thu vien Numpy

        print(sqrt(9))
        print(sqrt(5.5))
      </input>
      <output>
        (for static output)
      </output>
    </sage>
    
    <p>
      Nhưng chắc chắn ta không thể truyền cho hàm <c>np.sqrt()</c> một chuỗi kiểu <c>str</c> rồi.
    </p>

    <sage language="python">
      <input>
        print(sqrt("xin chao?"))
      </input>
      <output>
        (for static output)
      </output>
    </sage>

    <p>
      Nhưng cũng có những hàm có thể nhận giá trị đầu vào có kiểu dữ liệu tự do.
      Cũng có những hàm trả lại kiểu dữ liệu tự do, hoặc nó có thể không trả lại gì cả,
      khi ấy, kiểu dữ liệu đại diện cho điều đó là <c>None</c>.
    </p>

    <p>
      Một ví dụ điển hình cho hàm không có kiểu của tham số và kiểu trả lại chính là hàm <c>print()</c>
      Ta có thể truyền cho nó kiểu <c>str</c>, kiểu <c>int</c>, kiểu <c>float</c>, v.v.
      Và nó trả lại <c>None</c>.
    </p>
    
    <sage language="python">
      <input>
        a = print("Hello world!") 
        print(a)
      </input>
      <output>
        (for static output)
      </output>
    </sage>
    
  </subsection>

</section>
