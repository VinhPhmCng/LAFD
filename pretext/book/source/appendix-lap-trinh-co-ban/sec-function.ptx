<?xml version="1.0" encoding="UTF-8"?>

<!--*****************************************
This is part of the Ma Trận Sơ Cấp
Copyright (C) 2023-2024
Phạm Công Vinh, Phạm Xuân Trung
See the file COPYING for copying conditions.
******************************************-->

<section xml:id="sec-function" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Functions</title>

  <objectives>
    <ol>
      <li>Các mục tiêu của section.</li>
      <li></li>
      <li></li>
    </ol>
  </objectives>
  
  <p>
    Ta lại gặp một khái niệm nữa rất thân thuộc trong toán học<mdash /><term>hHàm</term>. Và nó cũng đóng vai trò thiết yếu trong lập trình.
    Again we are met with another familiar mathematical concept<mdash /><term>functions</term>, which also plays a big role in programming.
  </p>

  <p>
    Suppose we have 100 mathematical expressions:

    <md>
      <mrow>1^2 + 2 \cdot 1 + 1</mrow>
      <mrow>2^2 + 2 \cdot 2 + 1</mrow>
      <mrow>\vdots</mrow>
      <mrow>100^2 + 2 \cdot 100 + 1</mrow>
    </md>

    Ta nhận ra chúng có cùng một dạng là đa thức bậc hai. Vậy, ta có thể rút gọn cách trình bày bằng hàm số như sau:
    We realize they are all quadratics; therefore, we can shorten our representation using a function as follows:

    <md>
      <mrow>f(x) = x^2 + 2 \cdot x + 1</mrow>
      <mrow></mrow>
      <mrow>f(1)</mrow>
      <mrow>f(2)</mrow>
      <mrow>\vdots</mrow>
      <mrow>f(100)</mrow>
    </md>
  </p>

  <p>
    That is also the essence of <term>functions</term> in programming.
  </p>

  <definition xml:id="def-ham">
    <statement>
      <p>
        A <term>function</term> is a reusable block of code designed to perform a specific task.
      </p>
      <p>
        Hàm có thể không nhận hoặc nhận một hay nhiều hơn dữ liệu <term>đầu vào</term>.
        A function can accept zero, one, or more <term>inputs</term>, which is also called <term>parameters</term>.
      </p>
      <p>
        Hàm có thể không trả lại hoặc trả lại một hay nhiều hơn dữ liệu <term>đầu ra</term>.
        A function can return zero, one, or more <term>outputs</term>, which is also called <term>return values</term>.
      </p>
      <p>
        To <term>declare</term> a new function is to create a new one.
      </p>
      <p>
        To <term>call</term> a function is to use an existing function.
      </p>
    </statement>
  </definition>

  <p>
    In this section, we will not go into function declaration. Instead, we will focus on using functions that are built-in or provided by libraries. To read more about function declaration, refer to <xref ref="sec-khai-bao-ham"/>.
  </p>

  <technology>
    <title>Calling a function</title>
    <p>
      <em>Tùy vào từng hàm</em>, ta có hai cách: <me>{\color{blue} \text{tên hàm}} \, \text{(đầu vào 1, đầu vào 2, ...)}</me> hoặc <me>\text{đầu vào 1.} {\color{blue} \text{tên hàm}} \, \text{(đầu vào 2, đầu vào 3, ...)}</me>
      <em>Depending on how a function is declared</em>, we have two ways to call it: <me>{\color{blue} \text{function's name}} \, \text{(input 1, input 2, ...)}</me> or <me>\text{input 1.} {\color{blue} \text{function's name}} \, \text{(input 2, input 3, ...)}</me>
    </p>
  </technology>
  
  <p>
    A familiar example is the function <c>print()</c>, which can be called anywhere in the code and with any number of inputs.
  </p>

  <sage language="python">
    <input>
      print(5) 
      print()
      print(2, -2)
      print(1, "Hello World!", 5.5)
    </input>
  </sage>
  <problem>
    <pre>
      5
      
      2 -2
      1 Hello World! 5.5
    </pre>
  </problem>
  <investigation>
    <p></p>
    <p>
      Line 1: We call the function <c>print()</c> with the input <c>5</c>.
    </p>
    <p>
      Line 2: We provide no inputs, so <c>print()</c> outputs an empty line into the terminal.
    </p>
    <p>
      Line 3: We give it two inputs <c>2</c> and <c>-2</c>.
    </p>
    <p>
      Line 4: We give it multiple inputs of different data types.
    </p>
  </investigation>

  <p>
    Một ví dụ nữa là hàm <c>np.sqrt()</c> của Numpy. Nó có nhiệm vụ tính toán và trả lại căn bậc hai của dữ liệu đầu vào.
    Another example is <c>np.sqrt()</c>, which is a Numpy function. It accepts only one input, then it calculates and returns the square root.
  </p>

  <sage language="python">
    <input>
      import numpy as np # Use library Numpy 

      print(np.sqrt(9))
    </input>
  </sage>
  <problem>
    <pre>
      3.0
    </pre>
  </problem>
  <investigation>
    <p>
      The function <c>np.sqrt()</c> receives one input and returns the square root.
    </p>
  </investigation>
  
  <p>
    So, <c>np.sqrt()</c> has more specifications than <c>print()</c>. You have to call it with exactly one input, which must be <em>numeric</em>. The following examples will return errors.
  </p>

  <sage language="python">
    <input>
      import numpy as np # Use library Numpy 

      print(np.sqrt(9, 10))
    </input>
  </sage>
  <problem>
    <pre>
      TypeError
      Cell In [1], line 3

      ...

      TypeError: return arrays must be of ArrayType
    </pre>
  </problem>
  <investigation>
    <p></p>
    <p>The function <c>np.sqrt()</c> accepts exactly one input.</p>
    <p>
      We are giving it more than one inputs, so an error appears.
    </p>
  </investigation>

  <sage language="python">
    <input>
      import numpy as np # Use library Numpy 

      print(np.sqrt("Hello World!"))
    </input>
  </sage>
  <problem>
    <pre>
      TypeError
      Cell In [1], line 3

      ...

      TypeError: ufunc 'sqrt' not supported for the input types, and the inputs could not be safely coerced to any supported types according to the casting rule ''safe''
    </pre>
  </problem>
  <investigation>
    <p></p>
    <!--  -->
    <!-- Also, du lieu dau vao -> dau vao? -->
    <p>
      The input of <c>np.sqrt()</c> must be numeric.
    </p>
    <p>
      We are calling it with a string, so it returns an error.
    </p>
  </investigation>

  <p>
    Our final example is <c>upper()</c>, which follows the second syntax for calling a function. In this case, <q>input 1</q> must be a string. And the function returns a new string with every character capitalized.
  </p>

  <sage language="python">
    <input>
      s = "Xin chao!" 

      print(s.upper())
    </input>
  </sage>
  <problem>
    <pre>
      XIN CHAO!
    </pre>
  </problem>
  <investigation>
    <p>The function <c>upper()</c> returns a new capitalized string.</p>
  </investigation>
 
  <p>
    Đây là một ví dụ có lỗi.
    The following example produces an error:
  </p>

  <sage language="python">
    <input>
      a = 5 
      print(a.upper())
    </input>
  </sage>
  <problem>
    <pre>
      AttributeError
      Cell In [1], line 2

      ...

      AttributeError: 'int' object has no attribute 'upper'
    </pre>
  </problem>
  <investigation>
    <p></p>
    <p>
      The function <c>upper()</c> accepts exactly one input of type <c>str</c>.
    </p>
    <p>
      We can understand the error's description as <q>int does not have the function upper</q>.
    </p>
  </investigation>

</section>
