<?xml version="1.0" encoding="UTF-8"?>

<!--*****************************************
This is part of the Ma Trận Sơ Cấp
Copyright (C) 2023-2024
Phạm Công Vinh, Phạm Xuân Trung
See the file COPYING for copying conditions.
******************************************-->

<section xml:id="sec-nhan-ma-tran-va-ma-tran" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Nhân Ma Trận Và Ma Trận</title>

  <objectives>
    <introduction>
      <p>
        Giới thiệu bốn cách nhân hai ma trận <m>A</m> và <m>B</m>:
      </p>
    </introduction>
    <ol>
      <li>Nhân thông thường: Nhân các hàng của <m>A</m> với các cột của <m>B</m> (thường sử dụng khi viết tài liệu).</li>
      <li>Nhân ma trận <m>A</m> với các cột của <m>B</m>.</li>
      <li>Nhân các hàng của <m>A</m> với ma trận <m>B</m>.</li>
      <li>Tổng của các phép nhân các cột của <m>A</m> với các hàng của <m>B</m> (thường được sử dụng trong tính toán).</li>
    </ol>
  </objectives>

  <subsection xml:id="subsec-nhan-ma-tran-va-ma-tran-code">
    <title>Nhân hai ma trận trong lập trình</title>

    <p>
      <ul>
        <li>
          <p>
            Để nhân trong lập trình, ta dùng <c>*</c>.
          </p>
        </li>
      </ul>
    </p>
    
    <sage language="python">
      <input>
# Trong Numpy (Python)
import numpy as np # Su dung thu vien Numpy
        
A = np.matrix([
    [1, 2, 3],
    [4, 5, 6],
])

B = np.matrix([
    [1, 2],
    [3, 4],
    [5, 6]
])

print(A * B)
      </input>
    </sage>
    <problem>
      <pre>
[[22 28]
 [49 64]]
      </pre>
    </problem>

    <sage>
      <input>
# Trong SageMath
A = matrix(QQ, [
    [1/3, 2, 3],
    [4, 5, 6],
])

B = matrix(QQ, [
    [1, 2],
    [-3, 4],
    [5, 6]
])

latex.matrix_delimiters("[", "]") # Hien thi ngoac vuong
pretty_print(html(r'$%s \cdot %s = %s$' % (latex(A), latex(B), latex(A*B))))
      </input>
    </sage>
    <problem>
      <p>
        <me>
\bmat{\frac{1}{3} &amp; 2  &amp; 3 \\ 4 &amp; 5 &amp; 6} \cdot \bmat{1 &amp; 2 \\ -3 &amp; 4 \\ 5 &amp; 6} = \bmat{\frac{28}{3} &amp; \frac{80}{3} \\ 19 &amp; 64}
        </me>
      </p>
    </problem>

    <sage>
      <input>
# ...
pretty_print(html(r'$%s \cdot %s = %s$' % (latex(B), latex(A), latex(B*A))))
      </input>
    </sage>
    <problem>
      <p>
        <me>
\bmat{1 &amp; 2 \\ -3 &amp; 4 \\ 5 &amp; 6} \cdot \bmat{\frac{1}{3} &amp; 2  &amp; 3 \\ 4 &amp; 5 &amp; 6} = \bmat{\frac{25}{3} &amp; 12 &amp; 15 \\ 15 &amp; 14 &amp; 15 \\ \frac{77}{3} &amp; 40 &amp; 51}
        </me>
      </p>
    </problem>

    <p>
      Ví dụ nhân hai ma trận không thỏa mãn điều kiện kích thước <m>\rightarrow</m> <alert>Lỗi</alert>:
    </p>

    <sage>
      <input>
# Trong SageMath
        
b = matrix([
    [1, 2],
    [3, 4],
])

c = matrix([
    [1, 2, 3]
])

print(b * c)
      </input>
    </sage>
    <problem>
      <pre>
TypeError
Cell In [1], line 12

...

TypeError: unsupported operand parent(s) for *: 'Full MatrixSpace of 2 by 2 dense matrices over Integer Ring' and 'Full MatrixSpace of 1 by 3 dense matrices over Integer Ring'
      </pre>
    </problem>

  </subsection>

  <subsection xml:id="subsec-nhan-ma-tran-va-ma-tran-1-interact">
    <title>Trực quan hóa cách nhân thứ nhất với SageMath Interact</title>
    
    <figure xml:id="figure-nhan-ma-tran-va-ma-tran-1">

      <caption>Trực quan hóa cách nhân thứ nhất với SageMath Interact</caption>

      <interactive xml:id="interactive-nhan-ma-tran-va-ma-tran-1" platform="sage" width="100%" aspect="1:1">
        <slate surface="sage">
import numpy as np

def print_html(s):
    pretty_print(html(s))
    pretty_print("\n")
            
def tag(s, t):
    return "&lt;" + t + "&gt;" + s + "&lt;/" + t + "&gt;" 
            
def format_matrix(mat):
    return mat
    #def for_mat(x):
    #    if x.is_zero():
    #        return 0
    #    return x
            
    #sage_mat = matrix(QQ, np_mat)
    #new_mat = mat.apply_map(for_mat, R=QQ)
    #return new_mat
                    
def multiply1(A, B):
    M = A * B
    size = r'%s \times %s' % (
        latex(M.nrows()),
        latex(M.ncols()),
    )

    print_html(tag("", "hr"))
    print_html(r'$A = %s \qquad B = %s$' % (
        latex(format_matrix(A)),
        latex(format_matrix(B)),
    ))
    pretty_print("\n")
    print_html(r'$M = A \cdot B \rightarrow M_{%s}$' % (
        size,
    ))

    print_html(tag("", "hr"))
    print_html(r'$R_{1}^{A} \cdot C_{1}^{B} = %s \cdot %s = %s$' % (
        latex(format_matrix(A.matrix_from_rows([0]))),
        latex(format_matrix(B.matrix_from_columns([0]))),
        latex(M[0, 0]),
    ))
    print_html(r'$\rightarrow M = \begin{bmatrix} %s &amp; \cdot &amp; \cdots \\ \cdot &amp; \cdot &amp; \\ \vdots &amp; &amp; \ddots \end{bmatrix}_{%s}$' % (
      latex(M[0, 0]),
      size,
    ))

    print_html(tag("", "hr"))
    print_html(r'$R_{2}^{A} \cdot C_{1}^{B} = %s \cdot %s = %s$' % (
        latex(format_matrix(A.matrix_from_rows([1]))),
        latex(format_matrix(B.matrix_from_columns([0]))),
        latex(M[1, 0]),
    ))
    print_html(r'$\rightarrow M = \begin{bmatrix} %s &amp; \cdot  &amp; \cdots \\ %s &amp; \cdot &amp; \\ \vdots &amp; &amp; \ddots \end{bmatrix}_{%s}$' % (
      latex(M[0, 0]),
      latex(M[1, 0]),
      size,
    ))

    print_html(tag("", "hr"))
    print_html(r'$R_{1}^{A} \cdot C_{2}^{B} = %s \cdot %s = %s$' % (
        latex(format_matrix(A.matrix_from_rows([0]))),
        latex(format_matrix(B.matrix_from_columns([1]))),
        latex(M[0, 1]),
    ))
    print_html(r'$\rightarrow M = \begin{bmatrix} %s &amp; %s &amp; \cdots \\ %s &amp; \cdot &amp; \\ \vdots &amp; &amp; \ddots \end{bmatrix}_{%s}$' % (
      latex(M[0, 0]),
      latex(M[1, 0]),
      latex(M[0, 1]),
      size,
    ))

    print_html(tag("", "hr"))
    print_html(r'$R_{2}^{A} \cdot C_{2}^{B} = %s \cdot %s = %s$' % (
        latex(format_matrix(A.matrix_from_rows([1]))),
        latex(format_matrix(B.matrix_from_columns([1]))),
        latex(M[1, 1]),
    ))
    print_html(r'$\rightarrow M = \begin{bmatrix} %s &amp; %s &amp; \cdots \\ %s &amp; %s &amp; \\ \vdots &amp; &amp; \ddots \end{bmatrix}_{%s}$' % (
      latex(M[0, 0]),
      latex(M[1, 0]),
      latex(M[0, 1]),
      latex(M[1, 1]),
      size,
    ))
    
    print_html(tag("", "hr"))
    print_html(tag("Tương tự, tính tất cả các phần tử của M", "h3"))
    print_html(tag("...", "h3"))

    print_html(tag("", "hr"))
    print_html(tag("Kết quả:", "h2"))
    print_html(r'$%s \cdot %s = %s$' % (
        latex(format_matrix(A)),
        latex(format_matrix(B)),
        latex(format_matrix(M)),
    ))

###########################################
@interact(layout=dict(top = [['m', 'n', 'p']]))
def matrix_dimensions(
    m = ('Số hàng của A', 3),
    n = ('Số cột của A', 3),
    p = ('Số cột của B', 2),
):
    if not m in [2, 3, 4, 5]:
        print('Số hàng của A phải là một số nguyên từ 2 đến 5.')
        return
    if not n in [2, 3, 4, 5]:
        print('Số cột của A phải là một số nguyên từ 2 đến 5.')
        return
    if not p in [2, 3, 4, 5]:
        print('Số cột của B phải là một số nguyên từ 2 đến 5.')
        return
                    
    @interact(layout=dict(top = [['A', 'B']]))
    def func1(
        A = ('Ma trận A', matrix(
            QQ,
            nrows = m,
            ncols = n,
            entries = lambda i, j: i + j + 1,
        )),
        B = ('Ma trận B', matrix(
            QQ,
            nrows = n,
            ncols = p,
            entries = lambda i, j: i + j + 1,
        )),
    ):
        #if A.is_zero() or B.is_zero():
            #print('Ma trận đầu vào phải khác 0.')
            #return
            
        latex.matrix_delimiters("[", "]") # Hien thi ngoac vuong
        multiply1(A, B)
        </slate>
      </interactive>
    </figure>

  </subsection>

  <subsection xml:id="subsec-nhan-ma-tran-va-ma-tran-2-interact">
    <title>Trực quan hóa cách nhân thứ hai với SageMath Interact</title>
    
    <figure xml:id="figure-nhan-ma-tran-va-ma-tran-2">

      <caption>Trực quan hóa cách nhân thứ hai với SageMath Interact</caption>

      <interactive xml:id="interactive-nhan-ma-tran-va-ma-tran-2" platform="sage" width="100%" aspect="1:1">
        <slate surface="sage">
import numpy as np

def print_html(s):
    pretty_print(html(s))
    pretty_print("\n")
            
def tag(s, t):
    return "&lt;" + t + "&gt;" + s + "&lt;/" + t + "&gt;" 
            
def format_matrix(mat):
    return mat
    #def for_mat(x):
    #    if x.is_zero():
    #        return 0
    #    return x
            
    #sage_mat = matrix(QQ, np_mat)
    #new_mat = mat.apply_map(for_mat, R=QQ)
    #return new_mat
                    
def multiply2(A, B):
    M = A * B
    size = r'%s \times %s' % (
        latex(M.nrows()),
        latex(M.ncols()),
    )

    print_html(tag("", "hr"))
    print_html(r'$A = %s \qquad B = %s$' % (
        latex(format_matrix(A)),
        latex(format_matrix(B)),
    ))
    pretty_print("\n")
    print_html(r'$M = A \cdot B \rightarrow M_{%s}$' % (
        size,
    ))

    M1 = A * B.matrix_from_columns([0])
    print_html(tag("", "hr"))
    print_html(r'$A \cdot C_{1}^{B} = %s \cdot %s = %s$' % (
        latex(format_matrix(A)),
        latex(format_matrix(B.matrix_from_columns([0]))),
        latex(format_matrix(M1)),
    ))
    t = r'$\rightarrow M = \begin{bmatrix} %s &amp; \cdot &amp; \cdots ' 
    for i in range(1, M.nrows()):
        t += r'\\ %s &amp; \cdot &amp; \cdots '
    t += r'\end{bmatrix}_{%s}$'
    print_html(t % (
        *M1.list(),
        size,
    ))

    M12 = A * B.matrix_from_columns([0, 1])
    M2 = A * B.matrix_from_columns([1])
    print_html(tag("", "hr"))
    print_html(r'$A \cdot C_{2}^{B} = %s \cdot %s = %s$' % (
        latex(format_matrix(A)),
        latex(format_matrix(B.matrix_from_columns([1]))),
        latex(format_matrix(M2)),
    ))
    t = r'$\rightarrow M = \begin{bmatrix} %s &amp; %s &amp; \cdots ' 
    for i in range(1, M.nrows()):
        t += r'\\ %s &amp; %s &amp; \cdots '
    t += r'\end{bmatrix}_{%s}$'
    print_html(t % (
        *M12.list(),
        size,
    ))

    print_html(tag("", "hr"))
    print_html(tag("Tương tự, tính tất cả các cột của M", "h3"))
    print_html(tag("...", "h3"))

    print_html(tag("", "hr"))
    print_html(tag("Kết quả:", "h2"))
    print_html(r'$%s \cdot %s = %s$' % (
        latex(format_matrix(A)),
        latex(format_matrix(B)),
        latex(format_matrix(M)),
    ))


###########################################
@interact(layout=dict(top = [['m', 'n', 'p']]))
def matrix_dimensions(
    m = ('Số hàng của A', 2),
    n = ('Số cột của A', 3),
    p = ('Số cột của B', 3),
):
    if not m in [2, 3, 4, 5]:
        print('Số hàng của A phải là một số nguyên từ 2 đến 5.')
        return
    if not n in [2, 3, 4, 5]:
        print('Số cột của A phải là một số nguyên từ 2 đến 5.')
        return
    if not p in [2, 3, 4, 5]:
        print('Số cột của B phải là một số nguyên từ 2 đến 5.')
        return
                    
    @interact(layout=dict(top = [['A', 'B']]))
    def func1(
        A = ('Ma trận A', matrix(
            QQ,
            nrows = m,
            ncols = n,
            entries = lambda i, j: i + j + 1,
        )),
        B = ('Ma trận B', matrix(
            QQ,
            nrows = n,
            ncols = p,
            entries = lambda i, j: i + j + 1,
        )),
    ):
        #if A.is_zero() or B.is_zero():
            #print('Ma trận đầu vào phải khác 0.')
            #return
            
        latex.matrix_delimiters("[", "]") # Hien thi ngoac vuong
        multiply2(A, B)
        </slate>
      </interactive>
    </figure>

  </subsection>

  <subsection xml:id="subsec-nhan-ma-tran-va-ma-tran-3-interact">
    <title>Trực quan hóa cách nhân thứ ba với SageMath Interact</title>
    
    <figure xml:id="figure-nhan-ma-tran-va-ma-tran-3">

      <caption>Trực quan hóa cách nhân thứ ba với SageMath Interact</caption>

      <interactive xml:id="interactive-nhan-ma-tran-va-ma-tran-3" platform="sage" width="100%" aspect="1:1">
        <slate surface="sage">
import numpy as np

def print_html(s):
    pretty_print(html(s))
    pretty_print("\n")
            
def tag(s, t):
    return "&lt;" + t + "&gt;" + s + "&lt;/" + t + "&gt;" 
            
def format_matrix(mat):
    return mat
    #def for_mat(x):
    #    if x.is_zero():
    #        return 0
    #    return x
            
    #sage_mat = matrix(QQ, np_mat)
    #new_mat = mat.apply_map(for_mat, R=QQ)
    #return new_mat
                    
def multiply3(A, B):
    M = A * B
    size = r'%s \times %s' % (
        latex(M.nrows()),
        latex(M.ncols()),
    )

    print_html(tag("", "hr"))
    print_html(r'$A = %s \qquad B = %s$' % (
        latex(format_matrix(A)),
        latex(format_matrix(B)),
    ))
    pretty_print("\n")
    print_html(r'$M = A \cdot B \rightarrow M_{%s}$' % (
        size,
    ))

    M1 = A.matrix_from_rows([0]) * B
    print_html(tag("", "hr"))
    print_html(r'$R_{1}^{A} \cdot B = %s \cdot %s = %s$' % (
        latex(format_matrix(A.matrix_from_rows([0]))),
        latex(format_matrix(B)),
        latex(format_matrix(M1)),
    ))
    t = r'$\rightarrow M = \begin{bmatrix} ' 
    for i in range(1, M.ncols()):
        t += r'%s &amp; '
    t += r'%s \\ '

    for i in range(1, M.ncols()):
        t += r'\cdot &amp; '
    t += r'\cdot \\ '

    for i in range(1, M.ncols()):
        t += r'\vdots &amp; '
    t += r'\vdots'
    t += r'\end{bmatrix}_{%s}$'

    print_html(t % (
        *M1.list(),
        size,
    ))

    M12 = A.matrix_from_rows([0, 1]) * B
    M2 = A.matrix_from_rows([1]) * B
    print_html(tag("", "hr"))
    print_html(r'$R_{2}^{A} \cdot B = %s \cdot %s = %s$' % (
        latex(format_matrix(A.matrix_from_rows([1]))),
        latex(format_matrix(B)),
        latex(format_matrix(M2)),
    ))
    t = r'$\rightarrow M = \begin{bmatrix} ' 
    for i in range(1, M.ncols()):
        t += r'%s &amp; '
    t += r'%s \\ '

    for i in range(1, M.ncols()):
        t += r'%s &amp; '
    t += r'%s \\ '

    for i in range(1, M.ncols()):
        t += r'\vdots &amp; '
    t += r'\vdots'
    t += r'\end{bmatrix}_{%s}$'

    print_html(t % (
        *M12.list(),
        size,
    ))

    print_html(tag("", "hr"))
    print_html(tag("Tương tự, tính tất cả các hàng của M", "h3"))
    print_html(tag("...", "h3"))

    print_html(tag("", "hr"))
    print_html(tag("Kết quả:", "h2"))
    print_html(r'$%s \cdot %s = %s$' % (
        latex(format_matrix(A)),
        latex(format_matrix(B)),
        latex(format_matrix(M)),
    ))

###########################################
@interact(layout=dict(top = [['m', 'n', 'p']]))
def matrix_dimensions(
    m = ('Số hàng của A', 3),
    n = ('Số cột của A', 3),
    p = ('Số cột của B', 2),
):
    if not m in [2, 3, 4, 5]:
        print('Số hàng của A phải là một số nguyên từ 2 đến 5.')
        return
    if not n in [2, 3, 4, 5]:
        print('Số cột của A phải là một số nguyên từ 2 đến 5.')
        return
    if not p in [2, 3, 4, 5]:
        print('Số cột của B phải là một số nguyên từ 2 đến 5.')
        return
                    
    @interact(layout=dict(top = [['A', 'B']]))
    def func1(
        A = ('Ma trận A', matrix(
            QQ,
            nrows = m,
            ncols = n,
            entries = lambda i, j: i + j + 1,
        )),
        B = ('Ma trận B', matrix(
            QQ,
            nrows = n,
            ncols = p,
            entries = lambda i, j: i + j + 1,
        )),
    ):
        #if A.is_zero() or B.is_zero():
            #print('Ma trận đầu vào phải khác 0.')
            #return
            
        latex.matrix_delimiters("[", "]") # Hien thi ngoac vuong
        multiply3(A, B)
        </slate>
      </interactive>
    </figure>

  </subsection>

  <subsection xml:id="subsec-nhan-ma-tran-va-ma-tran-4-interact">
    <title>Trực quan hóa cách nhân thứ tư với SageMath Interact</title>
    
    <figure xml:id="figure-nhan-ma-tran-va-ma-tran-4">

      <caption>Trực quan hóa cách nhân thứ tư với SageMath Interact</caption>

      <interactive xml:id="interactive-nhan-ma-tran-va-ma-tran-4" platform="sage" width="100%" aspect="1:1">
        <slate surface="sage">
import numpy as np

def print_html(s):
    pretty_print(html(s))
    pretty_print("\n")
            
def tag(s, t):
    return "&lt;" + t + "&gt;" + s + "&lt;/" + t + "&gt;" 
            
def format_matrix(mat):
    return mat
    #def for_mat(x):
    #    if x.is_zero():
    #        return 0
    #    return x
            
    #sage_mat = matrix(QQ, np_mat)
    #new_mat = mat.apply_map(for_mat, R=QQ)
    #return new_mat
                    
def multiply4(A, B):
    M = A * B
    size = r'%s \times %s' % (
        latex(M.nrows()),
        latex(M.ncols()),
    )

    print_html(tag("", "hr"))
    print_html(r'$A = %s \qquad B = %s$' % (
        latex(format_matrix(A)),
        latex(format_matrix(B)),
    ))
    pretty_print("\n")
    print_html(r'$M = A \cdot B \rightarrow M_{%s}$' % (
        size,
    ))

    X1 = A.matrix_from_columns([0]) * B.matrix_from_rows([0])
    print_html(tag("", "hr"))
    print_html(r'$C_{1}^{A} \cdot R_{1}^{B} = %s \cdot %s = %s$' % (
        latex(format_matrix(A.matrix_from_columns([0]))),
        latex(format_matrix(B.matrix_from_rows([0]))),
        latex(format_matrix(X1)),
    ))

    X2 = A.matrix_from_columns([1]) * B.matrix_from_rows([1])
    print_html(tag("", "hr"))
    print_html(r'$C_{2}^{A} \cdot R_{2}^{B} = %s \cdot %s = %s$' % (
        latex(format_matrix(A.matrix_from_columns([1]))),
        latex(format_matrix(B.matrix_from_rows([1]))),
        latex(format_matrix(X2)),
    ))

    print_html(tag("", "hr"))
    print_html(tag("Tương tự, tính tất cả các ma trận thành phần", "h3"))
    print_html(tag("...", "h3"))

    print_html(tag("", "hr"))
    print_html(tag("Kết quả:", "h2"))

    Xs = []
    t = r'$M = '
    for i in range(A.ncols()):
        Xs.append(A.matrix_from_columns([i]) * B.matrix_from_rows([i]))
        t += r'%s '
        if i != A.ncols() - 1:
            t += r'+ '
    t += r'$'
    print_html(t % (
        *[latex(format_matrix(X)) for X in Xs],
    ))

    print_html(r'$\leftrightarrow M = %s$' % (
        latex(format_matrix(M)),
    ))

###########################################
@interact(layout=dict(top = [['m', 'n', 'p']]))
def matrix_dimensions(
    m = ('Số hàng của A', 3),
    n = ('Số cột của A', 3),
    p = ('Số cột của B', 2),
):
    if not m in [2, 3, 4, 5]:
        print('Số hàng của A phải là một số nguyên từ 2 đến 5.')
        return
    if not n in [2, 3, 4, 5]:
        print('Số cột của A phải là một số nguyên từ 2 đến 5.')
        return
    if not p in [2, 3, 4, 5]:
        print('Số cột của B phải là một số nguyên từ 2 đến 5.')
        return
                    
    @interact(layout=dict(top = [['A', 'B']]))
    def func1(
        A = ('Ma trận A', matrix(
            QQ,
            nrows = m,
            ncols = n,
            entries = lambda i, j: i + j + 1,
        )),
        B = ('Ma trận B', matrix(
            QQ,
            nrows = n,
            ncols = p,
            entries = lambda i, j: i + j + 1,
        )),
    ):
        #if A.is_zero() or B.is_zero():
            #print('Ma trận đầu vào phải khác 0.')
            #return
            
        latex.matrix_delimiters("[", "]") # Hien thi ngoac vuong
        multiply4(A, B)
        </slate>
      </interactive>
    </figure>

  </subsection>

</section>