<?xml version="1.0" encoding="UTF-8"?>

<!--*****************************************
This is part of the Ma Trận Sơ Cấp
Copyright (C) 2023-2024
Phạm Công Vinh, Phạm Xuân Trung
See the file COPYING for copying conditions.
******************************************-->

<section xml:id="sec-A-bang-Ciei" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Biểu Diễn Cơ Bản Ma Trận <m>A</m> Theo Các Vector Cột</title>
  <shorttitle><m>A = \sum C_{i}e_{i}</m></shorttitle>

  <objectives>
    <ul>
      <li>Biểu diễn ma trận thành tổng của các vector cột nhân các vector cơ sở.</li>
    </ul>
  </objectives>
  
  <subsection xml:id="subsec-Ciei-interact">
    <title>Tương tác <m>A = \sum C_{i}e_{i}</m> với SageMath Interact</title>
    
    <figure xml:id="figure-Ciei">

      <caption>Tương tác <m>A = \sum C_{i}e_{i}</m> với SageMath Interact</caption>

      <interactive xml:id="interactive-Ciei" platform="sage" width="100%" aspect="1:1">
        <slate surface="sage">
import numpy as np

def print_html(s):
    pretty_print(html(s))
    pretty_print("\n")
            
def tag(s, t):
    return "&lt;" + t + "&gt;" + s + "&lt;/" + t + "&gt;" 
            
def format_matrix(mat):
    return mat
    #def for_mat(x):
    #    if x.is_zero():
    #        return 0
    #    return x
            
    #sage_mat = matrix(QQ, np_mat)
    #new_mat = mat.apply_map(for_mat, R=QQ)
    #return new_mat
                    
def Ciei(A):
    C = [A.matrix_from_columns([i]) for i in range(A.ncols())]
    E = matrix.identity(A.ncols())

    C1e1 = A.matrix_from_columns([0]) * E.matrix_from_rows([0])
    print_html(tag("", "hr"))
    print_html(r'$C_{1} \cdot e_{1} = %s \cdot %s = %s$' % (
        latex(format_matrix(A.matrix_from_columns([0]))),
        latex(format_matrix(E.matrix_from_rows([0]))),
        latex(format_matrix(C1e1)),
    ))

    C2e2 = A.matrix_from_columns([1]) * E.matrix_from_rows([1])
    print_html(tag("", "hr"))
    print_html(r'$C_{2} \cdot e_{2} = %s \cdot %s = %s$' % (
        latex(format_matrix(A.matrix_from_columns([1]))),
        latex(format_matrix(E.matrix_from_rows([1]))),
        latex(format_matrix(C2e2)),
    ))

    print_html(tag("", "hr"))
    print_html(tag("Tương tự, tính tất cả các ma trận thành phần", "h3"))
    print_html(tag("...", "h3"))

    print_html(tag("", "hr"))
    print_html(tag("Kết quả:", "h2"))

    t = r'$A = '
    replacements = []
    for i in range(A.ncols()):
        replacements.append(C[i])
        replacements.append(E.matrix_from_rows([i]))

        t += r'%s \cdot %s '
        if i != A.ncols() - 1:
            t += r'+ '
    t += r'$'

    print_html(t % (
        *[latex(format_matrix(X)) for X in replacements],
    ))

###########################################
@interact(layout=dict(top = [['m', 'n']]))
def matrix_dimensions(
    m = ('Số hàng của A', 3),
    n = ('Số cột của A', 3),
):
    if not m in [2, 3, 4, 5]:
        print('Số hàng của A phải là một số nguyên từ 2 đến 5.')
        return
    if not n in [2, 3, 4, 5]:
        print('Số cột của A phải là một số nguyên từ 2 đến 5.')
        return
                    
    @interact(layout=dict(top = [['A']]))
    def func1(
        A = ('Ma trận A', matrix(
            QQ,
            nrows = m,
            ncols = n,
            entries = lambda i, j: i + j + 1,
        )),
    ):
        if A.is_zero():
            print('Ma trận đầu vào phải khác 0.')
            return
            
        latex.matrix_delimiters("[", "]") # Hien thi ngoac vuong
        Ciei(A)
        </slate>
      </interactive>
    </figure>

  </subsection>
</section>