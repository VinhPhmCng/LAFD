<?xml version="1.0" encoding="UTF-8"?>

<!--*****************************************
This is part of the Ma Trận Sơ Cấp
Copyright (C) 2023-2024
Phạm Công Vinh, Phạm Xuân Trung
See the file COPYING for copying conditions.
******************************************-->

<section xml:id="sec-A-bang-CiRk" xmlns:xi="http://www.w3.org/2001/XInclude">
  <title>Biểu Diễn Rút Gọn Ma Trận <m>A</m> Theo Các Cột</title>
  <shorttitle><m>A = \sum C_{i}R_{k}</m></shorttitle>

  <objectives>
    <ul>
      <li>Biểu diễn <m>A</m> thông qua các cột và hàng của <m>A</m>.</li>
    </ul>
  </objectives>

  <subsection xml:id="subsec-CiRk-interact">
    <title>Tương tác <m>A = \sum C_{i}R_{k}</m> với SageMath Interact</title>
    
    <figure xml:id="figure-CiRk">

      <caption>Tương tác <m>A = \sum C_{i}R_{k}</m> với SageMath Interact</caption>

      <interactive xml:id="interactive-CiRk" platform="sage" width="100%" aspect="1:1">
        <slate surface="sage">
import numpy as np

def print_html(s):
    pretty_print(html(s))
    pretty_print("\n")
            
def tag(s, t):
    return "&lt;" + t + "&gt;" + s + "&lt;/" + t + "&gt;" 
            
def format_matrix(mat):
    return mat
    #def for_mat(x):
    #    if x.is_zero():
    #        return 0
    #    return x
            
    #sage_mat = matrix(QQ, np_mat)
    #new_mat = mat.apply_map(for_mat, R=QQ)
    #return new_mat
                    
def decom(mat):
    m = 0 # Hang
    n = 0 # Cot
    i = 0
    rank = 0
    pairs = []
    decoms = []
            
    while m &lt; mat.nrows() and n &lt; mat.ncols():
        i += 1
        row_m = mat.matrix_from_rows([m])
        col_n = mat.matrix_from_columns([n])
            
        if m != 0 and n != 0:
            print_html(tag("-&gt; Duyệt tiếp hàng %s và cột %s." % (
                    str(m+1), 
                    str(n+1),
                ), "h3"))
                    
        print_html(tag("", "hr"))
        print_html(tag("Duyệt lần %s" % str(i), "h2"))
            
        t = r''
        if len(pairs) == 0:
            t = r'$A = %s' % latex(format_matrix(mat))
        else:
            t = r'$A_{%s} = %s' % (
                latex(len(pairs)), 
                latex(format_matrix(mat)),
            )
            
        if mat.is_zero():
            t += r'$'
            print_html(t)
            break
            
        t += r'\ có \ C_{%s} = %s \ và \  R_{%s} = %s$' % (
            latex(n+1), 
            latex(format_matrix(col_n)), 
            latex(m+1), 
            latex(format_matrix(row_m)),
        )
        print_html(t)
            
        # Hang != 0 VA Cot != 0
        if not row_m.is_zero() and not col_n.is_zero():
            row_m = row_m / mat[m, n] # Chia hang
            CnRm = col_n * row_m
            rem = mat - CnRm
                    
            print_html(tag("Nhận thấy: Hàng %s và cột %s đều KHÁC 0." % (
                str(n+1), 
                str(m+1),
            ), "h3"))
                        
            CnRm_str = r''
            if mat[m, n] == 1:
                CnRm_str = r'C_{%s} \cdot R_{%s}' % (
                    latex(n+1),
                    latex(m+1),
                )
            else:
                CnRm_str = r'{\displaystyle \frac{C_{%s} \cdot R_{%s}}{%s}}' % (
                    latex(n+1),
                    latex(m+1),
                    latex(mat[m, n]),
                )                
                        
            print_html(r'$\rightarrow %s = %s \cdot %s = %s$' % (
                CnRm_str,
                latex(format_matrix(col_n)),
                latex(format_matrix(row_m)),
                latex(format_matrix(CnRm)),
            ))
            
            t = r""
            if len(pairs) == 0:
                t = r'$\rightarrow A - %s = %s' % (
                    CnRm_str,
                    latex(format_matrix(rem)),
                )
            else:
                t = r'$\rightarrow A_{%s} - %s = %s' % (
                    latex(len(pairs)), 
                    CnRm_str,
                    latex(format_matrix(rem)),
                )
            t += r'= A_{%s}$' % (len(pairs)+1)
            print_html(t)
            
            pretty_print("\n")
                    
            mat = rem
            rank += 1
            pairs.append([m, n])
            decoms.append([row_m, col_n])
                    
            m += 1
            m = min(m, mat.nrows() - 1)
            n += 1
            n = min(n, mat.ncols() - 1)
                    
        # Hang != 0 VA Cot == 0
        elif not row_m.is_zero() and col_n.is_zero():
            print_html(tag("Nhận thấy: Cột %s BẰNG 0, và hàng %s KHÁC 0." % (
                str(n+1), 
                str(m+1),
            ), "h3"))
            n += 1
            n = min(n, mat.ncols() - 1)
                    
        # Hang == 0 VA Cot != 0
        elif row_m.is_zero() and not col_n.is_zero():
            print_html(tag("Nhận thấy: Hàng %s BẰNG 0, và cột %s KHÁC 0." % (
                str(m+1), 
                str(n+1),
            ), "h3"))
            m += 1
            m = min(m, mat.nrows() - 1)
                    
        # Hang == 0 VA Cot == 0
        else:
            if mat.is_zero():
                break
            print_html(tag("Nhận thấy: Hàng %s và cột %s đều BẰNG 0." % (
                str(n+1), 
                str(m+1),
            ), "h3"))
            
            m += 1
            m = min(m, mat.nrows() - 1)
            n += 1
            n = min(n, mat.ncols() - 1)
                        
    print_html(tag("Nhận thấy: Ma trận không -&gt; Phân rã hoàn tất!", "h3"))
            
    print_html(tag("", "hr"))
    print_html(tag("Kết quả:", "h2"))
            
    #result = r""
    #for i, pair in enumerate(pairs):
    #    result += r"c_{%s} \cdot r_{%s}" % (
    #        str(pair[1]+1), 
    #        str(pair[0]+1),
    #    )
    #    if i != len(pairs) - 1:
    #        result += r"+"
    #result = r"$A = " + result + r"$"
    #print_html(result)
            
    result = r""
    for i, pair in enumerate(decoms):
        result += r"%s \cdot %s" % (
            latex(format_matrix(pair[1])), 
            latex(format_matrix(pair[0])),
        )
        if i != len(decoms) - 1:
            result += r"+"
    result = r"$A = " + result + r"$"
    print_html(result)
                
    print_html(r'$\Rightarrow Rank = %s$' % (latex(rank)))
                    
###########################################
@interact(layout=dict(top = [['m', 'n']]))
def matrix_dimensions(
    m = ('Số hàng', 3),
    n = ('Số cột', 3),
):
    if not m in [2, 3, 4, 5]:
        print('Số hàng phải là một số nguyên từ 2 đến 5')
        return
    if not n in [2, 3, 4, 5]:
        print('Số cột phải là một số nguyên từ 2 đến 5')
        return
                    
    @interact(layout=dict(top = [['A']]))
    def func1(
        A = ('Ma trận A', matrix(
            QQ,
            nrows = m,
            ncols = n,
            entries = lambda i, j: i + j + 1,
        )),
    ):
        if A.is_zero():
            print('Ma trận đầu vào phải khác 0.')
            return
            
        latex.matrix_delimiters("[", "]") # Hien thi ngoac vuong
        decom(A)
        </slate>
      </interactive>
    </figure>

  </subsection>
  
</section>